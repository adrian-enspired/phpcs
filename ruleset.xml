<?xml version="1.0"?>
<ruleset name="nocworx-phpcs">
  <description>NocWorx PHP Coding Standard</description>

  <arg name="tab-width" value="2"/>

  <!-- PSR2 -->

  <rule ref="PSR2">
   <exclude name="Generic.Functions.FunctionCallArgumentSpacing"/>
   <exclude name="Generic.WhiteSpace.ScopeIndent.IncorrectExact"/>
   <exclude name="PEAR.NamingConventions.ValidVariableName.PublicUnderscore"/>
   <exclude name="PSR1.Classes.ClassDeclaration"/>
   <exclude name="PSR2.Classes.ClassDeclaration"/>
   <exclude name="PSR2.Methods.MethodDeclaration"/>
   <exclude name="PSR2.Classes.PropertyDeclaration.Underscore"/>
   <exclude name="PSR2.ControlStructures.SwitchDeclaration.BreakIndent"/>
   <exclude name="PSR2.Methods.FunctionCallSignature.Indent"/>
   <exclude name="Squiz.Functions.FunctionDeclaration"/>
   <exclude name="Squiz.Functions.MultiLineFunctionDeclaration"/>
  </rule>

  <rule ref="PSR2.ControlStructures.SwitchDeclaration.BreakIndent">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
    <severity>0</severity>
  </rule>

  <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
  <rule ref="PSR2.Namespaces.UseDeclaration"/>

  <!-- Squiz -->

  <rule ref="Squiz.Classes.ValidClassName"/>

  <rule ref="Squiz.Commenting.BlockComment"/>
  <rule ref="Squiz.Commenting.ClassComment">
    <exclude name="Squiz.Commenting.ClassComment.TagNotAllowed"/>
  </rule>
  <rule ref="Squiz.Commenting.EmptyCatchComment"/>
  <rule ref="Squiz.Commenting.FileComment">
    <exclude name="Squiz.Commenting.FileComment.MissingPackageTag"/>
    <exclude name="Squiz.Commenting.FileComment.MissingSubpackageTag"/>
  </rule>
  <rule ref="Squiz.Commenting.FunctionComment">
    <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
    <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
    <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
    <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
    <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
  </rule>
  <rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>
  <rule ref="Squiz.Commenting.InlineComment">
    <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>
    <exclude name="Squiz.Commenting.InlineComment.NotCapital"/>
  </rule>
  <rule ref="Squiz.Commenting.VariableComment"/>

  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
  <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
  <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

  <rule ref="Squiz.Functions.FunctionDeclaration"/>
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
    </properties>
  </rule>
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

  <rule ref="Squiz.PHP.DiscouragedFunctions"/>
  <rule ref="Squiz.PHP.GlobalKeyword"/>
  <rule ref="Squiz.PHP.InnerFunctions"/>
  <rule ref="Squiz.PHP.NonExecutableCode"/>

  <rule ref="Squiz.Scope.MemberVarScope"/>
  <rule ref="Squiz.Scope.MethodScope"/>
  <rule ref="Squiz.Scope.StaticThisUsage"/>

  <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
  <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
   <severity>0</severity>
  </rule>

  <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
  <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>
  <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/>
  <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
  <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
  <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
    <severity>0</severity>
   </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
    <severity>0</severity>
  </rule>

  <!-- Generic -->

  <rule ref="Generic.Classes.DuplicateClassName"/>

  <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
  <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
  <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
  <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
  <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
  <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

  <rule ref="Generic.ControlStructures.InlineControlStructure"/>

  <rule ref="Generic.Files.ByteOrderMark"/>
  <rule ref="Generic.Files.InlineHTML"/>
  <rule ref="Generic.Files.LineEndings">
    <properties>
      <property name="eolChar" value="\n"/>
    </properties>
  </rule>
  <rule ref="Generic.Files.LineLength">
    <properties>
      <property name="lineLimit" value="80"/>
      <property name="absoluteLineLimit" value="120"/>
    </properties>
  </rule>
  <rule ref="Generic.Files.OneClassPerFile"/>
  <rule ref="Generic.Files.OneTraitPerFile"/>
  <rule ref="Generic.Files.OneInterfacePerFile"/>

  <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
  <rule ref="Generic.Formatting.NoSpaceAfterCast"/>

  <rule ref="Generic.Functions.CallTimePassByReference"/>
  <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
  <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>

  <rule ref="Generic.Metrics.CyclomaticComplexity"/>
  <rule ref="Generic.Metrics.NestingLevel">
    <properties>
      <property name="nestingLevel" value="4"/>
      <property name="absoluteNestingLevel" value="5"/>
    </properties>
  </rule>

  <rule ref="Generic.NamingConventions.ConstructorName"/>
  <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
  <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>

  <rule ref="Generic.PHP.DeprecatedFunctions"/>
  <rule ref="Generic.PHP.ForbiddenFunctions">
    <properties>
      <property name="forbiddenFunctions"
                type="array"
                value="sizeof=>count,delete=>unset,create_function=>null,exec=>null,proc_open=>null,system=>null,eval=>null,array_push=>null,array=>null"/>
    </properties>
  </rule>
  <rule ref="Generic.PHP.LowerCaseConstant"/>
  <rule ref="Generic.PHP.LowerCaseKeyword"/>
  <rule ref="Generic.PHP.Syntax"/>

  <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="indent" value="2"/>
      <property name="exact" value="true"/>
      <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
    </properties>
  </rule>

  <!-- MySource -->

  <rule ref="MySource.PHP.EvalObjectFactory"/>
  <rule ref="MySource.PHP.GetRequestData"/>

  <!-- PEAR -->

  <rule ref="PEAR.Functions.ValidDefaultValue"/>

  <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <!-- Zend -->

  <rule ref="Zend.NamingConventions.ValidVariableName">
    <exclude name="Zend.NamingConventions.ValidVariableName.MemberVarNotCamelCaps"/>
    <exclude name="Zend.NamingConventions.ValidVariableName.NotCamelCaps"/>
  </rule>

</ruleset>
